programa = lista_import  lista_tipos lista_funcoes.
lista_import = {“import” "string" “;”}.
lista_funcoes = {declaracao_funcao}.
lista_tipos = {declaracao_tipo}.

declaracao_variavel = tipo [indice_vetor_matriz] "identificador" {“,” "identificador"} ";".
declaracao_tipo = “typedef” "identificador" ”{“ { declaracao_variavel }“}”.


declaracao_funcao =  (tipo | "void" )"identificador" "(" [tipo [indice_vetor_matriz] "identificador" {","tipo [indice_vetor_matriz] "identificador" } ]")" bloco_codigo .


indice_vetor_matriz = "[" ("identificador" | "numero") "]" {"[" ("identificador" | "numero") "]"}.

chamada_funcao_procedimento = "identificador" “(“ [ "identificador" { "," "identificador"  } ]“)”.


rotulo = "identificador" “:”.
desvio = (“continue” ["identificador"]) | ("break" ";").
condicional = “if” “(“ expressao_bool “)” bloco_codigo [“else”  bloco_codigo ].
laco = "while" "("expressao_bool")" bloco_codigo.

bloco_codigo = "{" { declaracao_variavel | atribuicao | condicional | laco | desvio | retorno | chamada_funcao_procedimento } "}".

retorno = "return" ("identificador" | chamada_funcao_procedimento | expressao_num | expressao_bool) ";".



atribuicao = "identificador" "=" (expressao_num | expressao_bool | chamada_funcao_procedimento | "identificador" ) ";".

expressao_num = termo | (termo  (“+” | “-“) expressao_num).
termo = fator | (fator (“*” | “/”) fator).
fator = "numero" | "identificador" | chamada_funcao_procedimento | “(“ expressao_num “)”.

expressao_bool = {“!”} (termo_bool | (termo_bool ( “&&” | “||” ) expressao_bool)).
termo_bool = booleano | "identificador" | chamada funcao_procedimento  | “(“expressao_bol”)” | comparacao.

comparacao = ("identificador" | "numero" |chamada_funcao_procedimento) ("==" | ">" | ">=" | "<=" | "<" | "!=") ("identificador" | "numero" | chamada_funcao_procedimento).

booleano = “true” | “false”.

tipo = "bool" | "int" | "String" | "identificador" | "char".