programa = lista_import  lista_tipos lista_funcoes.
lista_import = {“import” "string" “;” fim_import}.
lista_funcoes = {declaracao_funcao}.
lista_tipos = {declaracao_tipo}.

declaracao_variavel = tipo [indice_vetor_matriz] "identificador" new_var {“,” "identificador" new_var} ";".
declaracao_tipo = “typedef” "identificador" ”{“ { declaracao_variavel }“}” fim_new_type.


declaracao_funcao =  (tipo | "void" )"identificador" "(" [tipo [indice_vetor_matriz] "identificador" {","tipo [indice_vetor_matriz] "identificador" } ]")" new_func bloco_codigo  .


indice_vetor_matriz = "[" ("identificador" | "numero") "]" {"[" ("identificador" | "numero") "]"}.

chamada_funcao_procedimento = "identificador" “(“ [ "identificador" { "," "identificador"  } ]“)”.


rotulo = "identificador" “:”.
desvio = (“continue” ["identificador"]) | ("break" ";").
condicional = “if” new_cond “(“ expressao “)” chk_cond bloco_codigo [“else”  bloco_codigo ].
laco = "while" new_ite "("expressao")" chk_ite bloco_codigo  .

bloco_codigo = "{" new_context {declaracao_variavel fim_vars}  { atribuicao | condicional | laco | desvio | retorno | chamada_funcao_procedimento";" | "print" "(" ("string" ps | ("identificador" | "numero" ) pi )")" ";" }  "}" end_block_code.


retorno = "return" expressao ";".



atribuicao = "identificador" "=" expressao ";" atrib.

expressao = {("!" | "-") push_op} ( (termo push_term) | (termo push_term {operadores push_op (termo push_term | "("push_op expressao ")")} )| ("("push_op expressao ")" )) | chamada_funcao_procedimento.

termo = "identificador" | "true" | "false" | "Char" | "numero".

operadores = "+" | "-" | "/" | "*" | "||" | "&&" | "==" | ">=" | "<=" | "!=" | "<" | ">".

booleano = “true” | “false”.

tipo = "bool" | "int" | "String" | "identificador" | "char".